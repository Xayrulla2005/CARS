openapi: 3.0.0
info:
  title: Cars API
  description: API for managing users, categories, and cars
  version: 1.0.0

servers:
  - url: http://localhost:4001
    description: Local server

tags:
  - name: Auth
    description: User registration, login, and authentication
  - name: Category
    description: Manage car categories
  - name: Car
    description: Manage cars

paths:
  # ================= AUTH =================
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                email:
                  type: string
                  example: test@gmail.com
                password:
                  type: string
                  example: 123456
      responses:
        201:
          description: User registered successfully
        400:
          description: Email already exists

  /api/auth/verify-email:
    post:
      tags: [Auth]
      summary: Verify user email with code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
                code:
                  type: number
                  example: 123456
      responses:
        200:
          description: Email verified successfully

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
                password:
                  type: string
                  example: 123456
      responses:
        200:
          description: Login successful

  /api/auth/forget-password:
    post:
      tags: [Auth]
      summary: Send password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
      responses:
        200:
          description: Reset link sent to email

  /api/auth/reset-password/{token}:
    post:
      tags: [Auth]
      summary: Reset password with token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: newpassword123
      responses:
        200:
          description: Password reset successfully

  /api/auth/profile:
    get:
      tags: [Auth]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile fetched successfully

  # ================= CATEGORY =================
  /api/category:
    get:
      tags: [Category]
      summary: Get all categories
      responses:
        200:
          description: List of categories

    post:
      tags: [Category]
      summary: Create new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Sedan
      responses:
        201:
          description: Category created successfully

  /api/category/{id}:
    put:
      tags: [Category]
      summary: Update category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: SUV
      responses:
        200:
          description: Category updated successfully

    delete:
      tags: [Category]
      summary: Delete category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted successfully

  # ================= CARS =================
  /api/cars:
    get:
      tags: [Car]
      summary: Get all cars (with pagination and filters)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          schema:
            type: integer
            example: 10
        - name: search
          in: query
          schema:
            type: string
            example: BMW
      responses:
        200:
          description: List of cars

    post:
      tags: [Car]
      summary: Create a new car
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: M5 Competition
                brand:
                  type: string
                  example: BMW
                price:
                  type: number
                  example: 120000
                category:
                  type: string
                  example: 6710a37c541a60e25f3c932f
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: Car created successfully

  /api/cars/{id}:
    get:
      tags: [Car]
      summary: Get a single car by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Car details fetched successfully

    put:
      tags: [Car]
      summary: Update car
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                brand:
                  type: string
                price:
                  type: number
                category:
                  type: string
      responses:
        200:
          description: Car updated successfully

    delete:
      tags: [Car]
      summary: Delete car
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Car deleted successfully

# ================= SECURITY =================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Car:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        brand:
          type: string
        price:
          type: number
        category:
          type: string
        createdBy:
          type: string
openapi: 3.0.0
info:
  title: Car Management API
  version: 1.0.0
  description: API documentation for authentication, cars, and categories

servers:
  - url: http://localhost:4001
    description: Local server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      responses:
        "201":
          description: User registered successfully
  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      responses:
        "200":
          description: User logged in successfully
